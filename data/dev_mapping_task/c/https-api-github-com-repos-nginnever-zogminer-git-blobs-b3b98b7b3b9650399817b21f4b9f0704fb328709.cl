typedef uint eh_index; typedef __attribute__((aligned(64))) struct crypto_generichash_blake2b_state {
  ulong h[8];
  ulong t[2];
  ulong f[2];
  uchar buf[2 * 128];
  size_t buflen;
  uchar last_node;

} crypto_generichash_blake2b_state;

typedef crypto_generichash_blake2b_state eh_hash_state;

__constant ulong Ga[8] = {0x6a09e667f3bcc908ULL, 0xbb67ae8584caa73bULL, 0x3c6ef372fe94f82bULL, 0xa54ff53a5f1d36f1ULL, 0x510e527fade682d1ULL, 0x9b05688c2b3e6c1fULL, 0x1f83d9abfb41bd6bULL, 0x5be0cd19137e2179ULL};

__constant uchar Gb[12][16] = {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3}, {11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4}, {7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8}, {9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13}, {2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9},
                               {12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11}, {13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10}, {6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5}, {10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}, {14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3}};

inline ulong A(__const ulong a, __const unsigned b) {
  return (a >> b) | (a << (64 - b));
}

void B(void* a, void* b, size_t c) {
  char* d = (char*)b;
  char* e = (char*)a;

  for (int f = 0; f < c; f++)
    e[f] = d[f];
}

ulong C(__const void* a) {
  ulong b;
  B(&b, a, sizeof(b));
  return b;
}

void D(void* a, ulong b) {
  B(a, &b, sizeof(b));
}

int E(eh_hash_state* a, __const ulong b) {
  a->t[0] += b;
  a->t[1] += (a->t[0] < b);
  return 0;
}

int F(__const eh_hash_state* a) {
  return a->f[0] != 0;
}

int G(eh_hash_state* a) {
  a->f[1] = -1;
  return 0;
}

int H(eh_hash_state* a) {
  if (a->last_node)
    G(a);

  a->f[0] = -1;
  return 0;
}

int I(eh_hash_state* a, __const uchar b[128]) {
  ulong c[16];
  ulong d[16];
  int e;

  for (e = 0; e < 16; ++e)
    c[e] = C(b + e * sizeof(c[e]));

  for (e = 0; e < 8; ++e)
    d[e] = a->h[e];

  d[8] = Ga[0];
  d[9] = Ga[1];
  d[10] = Ga[2];
  d[11] = Ga[3];
  d[12] = a->t[0] ^ Ga[4];
  d[13] = a->t[1] ^ Ga[5];
  d[14] = a->f[0] ^ Ga[6];
  d[15] = a->f[1] ^ Ga[7];
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[0][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[0][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[0][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[0][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[0][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[0][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[0][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[0][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[0][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[0][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[0][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[0][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[0][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[0][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[0][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[0][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[1][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[1][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[1][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[1][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[1][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[1][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[1][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[1][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[1][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[1][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[1][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[1][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[1][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[1][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[1][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[1][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[2][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[2][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[2][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[2][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[2][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[2][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[2][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[2][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[2][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[2][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[2][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[2][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[2][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[2][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[2][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[2][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[3][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[3][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[3][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[3][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[3][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[3][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[3][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[3][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[3][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[3][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[3][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[3][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[3][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[3][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[3][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[3][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[4][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[4][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[4][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[4][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[4][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[4][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[4][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[4][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[4][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[4][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[4][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[4][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[4][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[4][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[4][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[4][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[5][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[5][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[5][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[5][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[5][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[5][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[5][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[5][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[5][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[5][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[5][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[5][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[5][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[5][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[5][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[5][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[6][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[6][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[6][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[6][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[6][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[6][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[6][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[6][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[6][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[6][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[6][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[6][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[6][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[6][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[6][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[6][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[7][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[7][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[7][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[7][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[7][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[7][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[7][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[7][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[7][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[7][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[7][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[7][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[7][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[7][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[7][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[7][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[8][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[8][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[8][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[8][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[8][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[8][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[8][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[8][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[8][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[8][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[8][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[8][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[8][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[8][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[8][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[8][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[9][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[9][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[9][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[9][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[9][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[9][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[9][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[9][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[9][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[9][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[9][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[9][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[9][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[9][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[9][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[9][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[10][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[10][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[10][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[10][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[10][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[10][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[10][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[10][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[10][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[10][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[10][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[10][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[10][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[10][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[10][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[10][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);
  do {
    do {
      d[0] = d[0] + d[4] + c[Gb[11][2 * 0 + 0]];
      d[12] = A(d[12] ^ d[0], 32);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 24);
      d[0] = d[0] + d[4] + c[Gb[11][2 * 0 + 1]];
      d[12] = A(d[12] ^ d[0], 16);
      d[8] = d[8] + d[12];
      d[4] = A(d[4] ^ d[8], 63);
    } while (0);
    do {
      d[1] = d[1] + d[5] + c[Gb[11][2 * 1 + 0]];
      d[13] = A(d[13] ^ d[1], 32);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 24);
      d[1] = d[1] + d[5] + c[Gb[11][2 * 1 + 1]];
      d[13] = A(d[13] ^ d[1], 16);
      d[9] = d[9] + d[13];
      d[5] = A(d[5] ^ d[9], 63);
    } while (0);
    do {
      d[2] = d[2] + d[6] + c[Gb[11][2 * 2 + 0]];
      d[14] = A(d[14] ^ d[2], 32);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 24);
      d[2] = d[2] + d[6] + c[Gb[11][2 * 2 + 1]];
      d[14] = A(d[14] ^ d[2], 16);
      d[10] = d[10] + d[14];
      d[6] = A(d[6] ^ d[10], 63);
    } while (0);
    do {
      d[3] = d[3] + d[7] + c[Gb[11][2 * 3 + 0]];
      d[15] = A(d[15] ^ d[3], 32);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 24);
      d[3] = d[3] + d[7] + c[Gb[11][2 * 3 + 1]];
      d[15] = A(d[15] ^ d[3], 16);
      d[11] = d[11] + d[15];
      d[7] = A(d[7] ^ d[11], 63);
    } while (0);
    do {
      d[0] = d[0] + d[5] + c[Gb[11][2 * 4 + 0]];
      d[15] = A(d[15] ^ d[0], 32);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 24);
      d[0] = d[0] + d[5] + c[Gb[11][2 * 4 + 1]];
      d[15] = A(d[15] ^ d[0], 16);
      d[10] = d[10] + d[15];
      d[5] = A(d[5] ^ d[10], 63);
    } while (0);
    do {
      d[1] = d[1] + d[6] + c[Gb[11][2 * 5 + 0]];
      d[12] = A(d[12] ^ d[1], 32);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 24);
      d[1] = d[1] + d[6] + c[Gb[11][2 * 5 + 1]];
      d[12] = A(d[12] ^ d[1], 16);
      d[11] = d[11] + d[12];
      d[6] = A(d[6] ^ d[11], 63);
    } while (0);
    do {
      d[2] = d[2] + d[7] + c[Gb[11][2 * 6 + 0]];
      d[13] = A(d[13] ^ d[2], 32);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 24);
      d[2] = d[2] + d[7] + c[Gb[11][2 * 6 + 1]];
      d[13] = A(d[13] ^ d[2], 16);
      d[8] = d[8] + d[13];
      d[7] = A(d[7] ^ d[8], 63);
    } while (0);
    do {
      d[3] = d[3] + d[4] + c[Gb[11][2 * 7 + 0]];
      d[14] = A(d[14] ^ d[3], 32);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 24);
      d[3] = d[3] + d[4] + c[Gb[11][2 * 7 + 1]];
      d[14] = A(d[14] ^ d[3], 16);
      d[9] = d[9] + d[14];
      d[4] = A(d[4] ^ d[9], 63);
    } while (0);
  } while (0);

  for (e = 0; e < 8; ++e)
    a->h[e] = a->h[e] ^ d[e] ^ d[e + 8];

  return 0;
}

int J(eh_hash_state* a, __const uchar* b, ulong c) {
  while (c > 0) {
    size_t d = a->buflen;
    size_t e = 2 * 128 - d;

    if (c > e) {
      B(a->buf + d, b, e);

      a->buflen += e;
      E(a, 128);
      I(a, a->buf);
      B(a->buf, a->buf + 128, 128);

      a->buflen -= 128;
      b += e;
      c -= e;
    } else {
      B(a->buf + d, b, c);

      a->buflen += c;
      b += c;
      c -= c;
    }
  }

  return 0;
}

int K(eh_hash_state* a, uchar* b, uchar c) {
  uchar d[64] = {0};
  int e;

  if (b == 0 || c == 0 || c > 64)
    return -1;

  if (F(a))
    return -1;

  if (a->buflen > 128) {
    E(a, 128);
    I(a, a->buf);
    a->buflen -= 128;
    B(a->buf, a->buf + 128, a->buflen);
  }

  E(a, a->buflen);
  H(a);

  for (e = 0; e < 2 * 128 - a->buflen; ++e)
    (a->buf + a->buflen)[e] = 0;

  I(a, a->buf);

  for (e = 0; e < 8; ++e)
    D(d + sizeof(a->h[e]) * e, a->h[e]);

  B(b, d, c);

  return 0;
}

void L(__const eh_hash_state* a, eh_index b, uchar* c, size_t d) {
  eh_hash_state e = *a;

  eh_index f = (b);
  J(&e, (__const uchar*)&f, sizeof(eh_index));
  K(&e, c, d);
}

void M(__const uchar* a, size_t b, uchar* c, size_t d, size_t e, size_t f) {
  size_t g = (e + 7) / 8 + f;

  uint h = ((uint)1 << e) - 1;

  size_t i = 0;
  uint j = 0;

  size_t k = 0;
  for (size_t l = 0; l < b; l++) {
    j = (j << 8) | a[l];
    i += 8;

    if (i >= e) {
      i -= e;
      for (size_t m = 0; m < f; m++) {
        c[k + m] = 0;
      }
      for (size_t m = f; m < g; m++) {
        c[k + m] = (

                       j >> (i + (8 * (g - m - 1)))) &
                   (

                       (h >> (8 * (g - m - 1))) & 0xFF);
      }
      k += g;
    }
  }
}

void N(__const eh_index a, uchar* b) {
  eh_index c = (__builtin_astype(__builtin_astype(a, uchar4).wzyx, uint));
  B(b, &c, sizeof(eh_index));
}

__kernel void O(__global ulong* a) {
  size_t b = get_global_id(0);

  uchar c[512 / 200 * 200 / 8];
  eh_hash_state d;
  L(&d, b, c, 512 / 200 * 200 / 8);

  eh_index e;
  for (e = 0; e < 512 / 200; ++e) {
    if (b + e >= 1 << (200 / (9 + 1) + 1))
      break;

    uchar f[2 * (200 / (9 + 1) + 7) / 8 + sizeof(eh_index) * (1 << (9 - 1))];
    M(c + (e * 200 / 8), 200 / 8, f, (9 + 1) * (200 / (9 + 1) + 7) / 8, 200 / (9 + 1), 0);
    N((b * 512 / 200) + e, f + (size_t)(9 + 1) * (200 / (9 + 1) + 7) / 8);
  }
}