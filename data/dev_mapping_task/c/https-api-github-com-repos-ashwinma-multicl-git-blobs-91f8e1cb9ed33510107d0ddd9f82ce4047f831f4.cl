__kernel void A(__global double* a, __global double* b, __local double* c, int d, int e, int f, int g, int h) {
  int i, j, k, l, m;
  __global double(*n)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __local double* o;

  k = get_global_id(0) + 1;
  m = get_local_id(0);
  o = &c[m * 5];

  for (l = 0; l < 5; l++) {
    o[l] = 0.0;
  }

  if (k < 64 - 1) {
    n = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])a;

    for (j = g; j < h; j++) {
      for (i = e; i < f; i++) {
        for (l = 0; l < 5; l++) {
          o[l] = o[l] + n[k][j][i][l] * n[k][j][i][l];
        }
      }
    }
  }

  barrier(1);

  if (m == 0) {
    for (i = 1; i < get_local_size(0); i++) {
      __local double* p = &c[i * 5];
      for (l = 0; l < 5; l++) {
        o[l] += p[l];
      }
    }

    __global double* q = &b[get_group_id(0) * 5];
    for (l = 0; l < 5; l++) {
      q[l] = o[l];
    }
  }
}

__kernel void B(__global double* a, __global double* b, __global double* c, __global double* d, __global double* e, int f, int g, int h) {
  int i, j, k, l;
  double m;
  __global double(*n)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*o)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*p)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*q)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];
  __global double(*r)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];

  k = get_global_id(2);
  j = get_global_id(1);
  i = get_global_id(0);
  if (k >= h || j >= g || i >= f)
    return;

  n = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])a;
  o = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])b;
  p = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])c;
  q = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])d;
  r = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])e;

  for (l = 0; l < 5; l++) {
    o[k][j][i][l] = -p[k][j][i][l];
  }
  m = 1.0 / n[k][j][i][0];
  r[k][j][i] = m;
  q[k][j][i] = 0.50 * (n[k][j][i][1] * n[k][j][i][1] + n[k][j][i][2] * n[k][j][i][2] + n[k][j][i][3] * n[k][j][i][3]) * m;
}

__kernel void C(__global double* a, __global double* b, __global double* c, __global double* d, __global double* e, int f, int g, int h) {
  int i, j, k, l;
  double m;
  double n;
  double o;
  double p, q, r, s;
  double t, u, v, w;
  __global double(*x)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*y)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*z)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];
  __global double(*aa)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];
  __global double(*ab)[5];

  k = get_global_id(1) + 1;
  j = get_global_id(0) + 1;
  if (k >= (h - 1) || j >= (g - 1))
    return;

  x = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])a;
  y = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])b;
  z = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])c;
  aa = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])d;

  int ac = (k - 1) * 64 + (j - 1);
  int ad = ac * 64 * 5;
  ab = (__global double(*)[5]) & e[ad];

  for (i = 0; i < f; i++) {
    ab[i][0] = x[k][j][i][1];
    o = x[k][j][i][1] * aa[k][j][i];

    m = z[k][j][i];

    ab[i][1] = x[k][j][i][1] * o + 0.40e+00 * (x[k][j][i][4] - m);
    ab[i][2] = x[k][j][i][2] * o;
    ab[i][3] = x[k][j][i][3] * o;
    ab[i][4] = (1.40e+00 * x[k][j][i][4] - 0.40e+00 * m) * o;
  }

  for (i = 1; i < (f - 1); i++) {
    for (l = 0; l < 5; l++) {
      y[k][j][i][l] = y[k][j][i][l] - (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ab[i + 1][l] - ab[i - 1][l]);
    }
  }

  for (i = 1; i < f; i++) {
    n = aa[k][j][i];

    p = n * x[k][j][i][1];
    q = n * x[k][j][i][2];
    r = n * x[k][j][i][3];
    s = n * x[k][j][i][4];

    n = aa[k][j][i - 1];

    t = n * x[k][j][i - 1][1];
    u = n * x[k][j][i - 1][2];
    v = n * x[k][j][i - 1][3];
    w = n * x[k][j][i - 1][4];

    ab[i][1] = (4.0 / 3.0) * (1.0 / (1.0 / (64 - 1))) * (p - t);
    ab[i][2] = (1.0 / (1.0 / (64 - 1))) * (q - u);
    ab[i][3] = (1.0 / (1.0 / (64 - 1))) * (r - v);
    ab[i][4] = 0.50 * (1.0 - 1.40e+00 * 1.40e+00) * (1.0 / (1.0 / (64 - 1))) * ((p * p + q * q + r * r) - (t * t + u * u + v * v)) + (1.0 / 6.0) * (1.0 / (1.0 / (64 - 1))) * (p * p - t * t) + 1.40e+00 * 1.40e+00 * (1.0 / (1.0 / (64 - 1))) * (s - w);
  }

  for (i = 1; i < (f - 1); i++) {
    y[k][j][i][0] = y[k][j][i][0] + 0.75 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (x[k][j][i - 1][0] - 2.0 * x[k][j][i][0] + x[k][j][i + 1][0]);
    y[k][j][i][1] = y[k][j][i][1] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ab[i + 1][1] - ab[i][1]) + 0.75 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (x[k][j][i - 1][1] - 2.0 * x[k][j][i][1] + x[k][j][i + 1][1]);
    y[k][j][i][2] = y[k][j][i][2] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ab[i + 1][2] - ab[i][2]) + 0.75 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (x[k][j][i - 1][2] - 2.0 * x[k][j][i][2] + x[k][j][i + 1][2]);
    y[k][j][i][3] = y[k][j][i][3] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ab[i + 1][3] - ab[i][3]) + 0.75 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (x[k][j][i - 1][3] - 2.0 * x[k][j][i][3] + x[k][j][i + 1][3]);
    y[k][j][i][4] = y[k][j][i][4] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ab[i + 1][4] - ab[i][4]) + 0.75 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (x[k][j][i - 1][4] - 2.0 * x[k][j][i][4] + x[k][j][i + 1][4]);
  }

  for (l = 0; l < 5; l++) {
    y[k][j][1][l] = y[k][j][1][l] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (+5.0 * x[k][j][1][l] - 4.0 * x[k][j][2][l] + x[k][j][3][l]);
    y[k][j][2][l] = y[k][j][2][l] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (-4.0 * x[k][j][1][l] + 6.0 * x[k][j][2][l] - 4.0 * x[k][j][3][l] + x[k][j][4][l]);
  }

  for (i = 3; i < f - 3; i++) {
    for (l = 0; l < 5; l++) {
      y[k][j][i][l] = y[k][j][i][l] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (x[k][j][i - 2][l] - 4.0 * x[k][j][i - 1][l] + 6.0 * x[k][j][i][l] - 4.0 * x[k][j][i + 1][l] + x[k][j][i + 2][l]);
    }
  }

  for (l = 0; l < 5; l++) {
    y[k][j][f - 3][l] = y[k][j][f - 3][l] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (x[k][j][f - 5][l] - 4.0 * x[k][j][f - 4][l] + 6.0 * x[k][j][f - 3][l] - 4.0 * x[k][j][f - 2][l]);
    y[k][j][f - 2][l] = y[k][j][f - 2][l] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (x[k][j][f - 4][l] - 4.0 * x[k][j][f - 3][l] + 5.0 * x[k][j][f - 2][l]);
  }
}

__kernel void D(__global double* a, __global double* b, __global double* c, __global double* d, __global double* e, int f, int g, int h) {
  int i, j, k, l;
  double m;
  double n;
  double o;
  double p, q, r, s;
  double t, u, v, w;

  __global double(*x)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*y)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*z)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];
  __global double(*aa)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];
  __global double(*ab)[5];

  k = get_global_id(1) + 1;
  i = get_global_id(0) + 1;
  if (k >= (h - 1) || i >= (f - 1))
    return;

  x = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])a;
  y = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])b;
  z = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])c;
  aa = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])d;

  int ac = (k - 1) * 64 + (i - 1);
  int ad = ac * 64 * 5;
  ab = (__global double(*)[5]) & e[ad];

  for (j = 0; j < g; j++) {
    ab[j][0] = x[k][j][i][2];
    o = x[k][j][i][2] * aa[k][j][i];

    m = z[k][j][i];

    ab[j][1] = x[k][j][i][1] * o;
    ab[j][2] = x[k][j][i][2] * o + 0.40e+00 * (x[k][j][i][4] - m);
    ab[j][3] = x[k][j][i][3] * o;
    ab[j][4] = (1.40e+00 * x[k][j][i][4] - 0.40e+00 * m) * o;
  }

  for (j = 1; j < (g - 1); j++) {
    for (l = 0; l < 5; l++) {
      y[k][j][i][l] = y[k][j][i][l] - (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ab[j + 1][l] - ab[j - 1][l]);
    }
  }

  for (j = 1; j < g; j++) {
    n = aa[k][j][i];

    p = n * x[k][j][i][1];
    q = n * x[k][j][i][2];
    r = n * x[k][j][i][3];
    s = n * x[k][j][i][4];

    n = aa[k][j - 1][i];
    t = n * x[k][j - 1][i][1];
    u = n * x[k][j - 1][i][2];
    v = n * x[k][j - 1][i][3];
    w = n * x[k][j - 1][i][4];

    ab[j][1] = (1.0 / (1.0 / (64 - 1))) * (p - t);
    ab[j][2] = (4.0 / 3.0) * (1.0 / (1.0 / (64 - 1))) * (q - u);
    ab[j][3] = (1.0 / (1.0 / (64 - 1))) * (r - v);
    ab[j][4] = 0.50 * (1.0 - 1.40e+00 * 1.40e+00) * (1.0 / (1.0 / (64 - 1))) * ((p * p + q * q + r * r) - (t * t + u * u + v * v)) + (1.0 / 6.0) * (1.0 / (1.0 / (64 - 1))) * (q * q - u * u) + 1.40e+00 * 1.40e+00 * (1.0 / (1.0 / (64 - 1))) * (s - w);
  }

  for (j = 1; j < (g - 1); j++) {
    y[k][j][i][0] = y[k][j][i][0] + 0.75 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (x[k][j - 1][i][0] - 2.0 * x[k][j][i][0] + x[k][j + 1][i][0]);

    y[k][j][i][1] = y[k][j][i][1] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ab[j + 1][1] - ab[j][1]) + 0.75 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (x[k][j - 1][i][1] - 2.0 * x[k][j][i][1] + x[k][j + 1][i][1]);

    y[k][j][i][2] = y[k][j][i][2] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ab[j + 1][2] - ab[j][2]) + 0.75 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (x[k][j - 1][i][2] - 2.0 * x[k][j][i][2] + x[k][j + 1][i][2]);

    y[k][j][i][3] = y[k][j][i][3] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ab[j + 1][3] - ab[j][3]) + 0.75 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (x[k][j - 1][i][3] - 2.0 * x[k][j][i][3] + x[k][j + 1][i][3]);

    y[k][j][i][4] = y[k][j][i][4] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ab[j + 1][4] - ab[j][4]) + 0.75 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (x[k][j - 1][i][4] - 2.0 * x[k][j][i][4] + x[k][j + 1][i][4]);
  }

  for (l = 0; l < 5; l++) {
    y[k][1][i][l] = y[k][1][i][l] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (+5.0 * x[k][1][i][l] - 4.0 * x[k][2][i][l] + x[k][3][i][l]);
    y[k][2][i][l] = y[k][2][i][l] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (-4.0 * x[k][1][i][l] + 6.0 * x[k][2][i][l] - 4.0 * x[k][3][i][l] + x[k][4][i][l]);
  }

  for (j = 3; j < g - 3; j++) {
    for (l = 0; l < 5; l++) {
      y[k][j][i][l] = y[k][j][i][l] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (x[k][j - 2][i][l] - 4.0 * x[k][j - 1][i][l] + 6.0 * x[k][j][i][l] - 4.0 * x[k][j + 1][i][l] + x[k][j + 2][i][l]);
    }
  }

  for (l = 0; l < 5; l++) {
    y[k][g - 3][i][l] = y[k][g - 3][i][l] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (x[k][g - 5][i][l] - 4.0 * x[k][g - 4][i][l] + 6.0 * x[k][g - 3][i][l] - 4.0 * x[k][g - 2][i][l]);
    y[k][g - 2][i][l] = y[k][g - 2][i][l] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (x[k][g - 4][i][l] - 4.0 * x[k][g - 3][i][l] + 5.0 * x[k][g - 2][i][l]);
  }
}

__kernel void E(__global double* a, __global double* b, __global double* c, __global double* d, __global double* e, __global double* f, __global double* g, int h, int i, int j) {
  int k, l, m, n;
  double o;
  double p;
  double q;
  double r, s, t, u;
  double v, w, x, y;

  __global double(*z)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*aa)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*ab)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];
  __global double(*ac)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];
  __global double(*ad)[5];
  __global double(*ae)[6];
  __global double(*af)[5];

  l = get_global_id(1) + 1;
  k = get_global_id(0) + 1;
  if (l >= (i - 1) || k >= (h - 1))
    return;

  z = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])a;
  aa = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])b;
  ab = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])c;
  ac = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])d;

  int ag = (l - 1) * 64 + (k - 1);
  int ah = ag * 64 * 5;
  ad = (__global double(*)[5]) & e[ah];

  ah = ag * 64 * 6;
  ae = (__global double(*)[6]) & f[ah];
  ah = ag * 64 * 5;
  af = (__global double(*)[5]) & g[ah];

  for (m = 0; m < j; m++) {
    ae[m][0] = z[m][l][k][0];
    ae[m][1] = z[m][l][k][1];
    ae[m][2] = z[m][l][k][2];
    ae[m][3] = z[m][l][k][3];
    ae[m][4] = z[m][l][k][4];
    ae[m][5] = ac[m][l][k];
  }
  for (m = 0; m < j; m++) {
    ad[m][0] = ae[m][3];
    q = ae[m][3] * ae[m][5];

    o = ab[m][l][k];

    ad[m][1] = ae[m][1] * q;
    ad[m][2] = ae[m][2] * q;
    ad[m][3] = ae[m][3] * q + 0.40e+00 * (ae[m][4] - o);
    ad[m][4] = (1.40e+00 * ae[m][4] - 0.40e+00 * o) * q;
  }

  for (m = 1; m < j - 1; m++) {
    for (n = 0; n < 5; n++) {
      af[m][n] = aa[m][l][k][n] - (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ad[m + 1][n] - ad[m - 1][n]);
    }
  }

  for (m = 1; m < j; m++) {
    p = ae[m][5];

    r = p * ae[m][1];
    s = p * ae[m][2];
    t = p * ae[m][3];
    u = p * ae[m][4];

    p = ae[m - 1][5];

    v = p * ae[m - 1][1];
    w = p * ae[m - 1][2];
    x = p * ae[m - 1][3];
    y = p * ae[m - 1][4];

    ad[m][1] = (1.0 / (1.0 / (64 - 1))) * (r - v);
    ad[m][2] = (1.0 / (1.0 / (64 - 1))) * (s - w);
    ad[m][3] = (4.0 / 3.0) * (1.0 / (1.0 / (64 - 1))) * (t - x);
    ad[m][4] = 0.50 * (1.0 - 1.40e+00 * 1.40e+00) * (1.0 / (1.0 / (64 - 1))) * ((r * r + s * s + t * t) - (v * v + w * w + x * x)) + (1.0 / 6.0) * (1.0 / (1.0 / (64 - 1))) * (t * t - x * x) + 1.40e+00 * 1.40e+00 * (1.0 / (1.0 / (64 - 1))) * (u - y);
  }

  for (m = 1; m < j - 1; m++) {
    af[m][0] = af[m][0] + 1.00 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (ae[m - 1][0] - 2.0 * ae[m][0] + ae[m + 1][0]);
    af[m][1] = af[m][1] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ad[m + 1][1] - ad[m][1]) + 1.00 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (ae[m - 1][1] - 2.0 * ae[m][1] + ae[m + 1][1]);
    af[m][2] = af[m][2] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ad[m + 1][2] - ad[m][2]) + 1.00 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (ae[m - 1][2] - 2.0 * ae[m][2] + ae[m + 1][2]);
    af[m][3] = af[m][3] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ad[m + 1][3] - ad[m][3]) + 1.00 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (ae[m - 1][3] - 2.0 * ae[m][3] + ae[m + 1][3]);
    af[m][4] = af[m][4] + (1.0 / (1.0 / (64 - 1))) * 1.00e-01 * 1.00e+00 * (ad[m + 1][4] - ad[m][4]) + 1.00 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (ae[m - 1][4] - 2.0 * ae[m][4] + ae[m + 1][4]);
  }

  for (n = 0; n < 5; n++) {
    aa[1][l][k][n] = af[1][n] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (+5.0 * ae[1][n] - 4.0 * ae[2][n] + ae[3][n]);
    aa[2][l][k][n] = af[2][n] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (-4.0 * ae[1][n] + 6.0 * ae[2][n] - 4.0 * ae[3][n] + ae[4][n]);
  }

  for (m = 3; m < j - 3; m++) {
    for (n = 0; n < 5; n++) {
      aa[m][l][k][n] = af[m][n] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (ae[m - 2][n] - 4.0 * ae[m - 1][n] + 6.0 * ae[m][n] - 4.0 * ae[m + 1][n] + ae[m + 2][n]);
    }
  }

  for (n = 0; n < 5; n++) {
    aa[j - 3][l][k][n] = af[j - 3][n] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (ae[j - 5][n] - 4.0 * ae[j - 4][n] + 6.0 * ae[j - 3][n] - 4.0 * ae[j - 2][n]);
    aa[j - 2][l][k][n] = af[j - 2][n] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (ae[j - 4][n] - 4.0 * ae[j - 3][n] + 5.0 * ae[j - 2][n]);
  }
}

__kernel void F(__global double* a, __global double* b, __global double* c, __global double* d, __global double* e, __global double* f, __global double* g, __global double* h, int i, int j) {
  int k, l, m, n;
  __global double(*o)[64 / 2 * 2 + 1][5][5];
  __global double(*p)[64 / 2 * 2 + 1][5][5];
  __global double(*q)[64 / 2 * 2 + 1][5][5];
  __global double(*r)[64 / 2 * 2 + 1][5][5];
  __global double(*s)[64 / 2 * 2 + 1][5][5];
  __global double(*t)[64 / 2 * 2 + 1][5][5];
  __global double(*u)[64 / 2 * 2 + 1][5][5];
  __global double(*v)[64 / 2 * 2 + 1][5][5];
  l = get_global_id(0) + 1;
  if (l >= (j - 1))
    return;

  o = (__global double(*)[64 / 2 * 2 + 1][5][5])a;
  p = (__global double(*)[64 / 2 * 2 + 1][5][5])b;
  q = (__global double(*)[64 / 2 * 2 + 1][5][5])c;
  r = (__global double(*)[64 / 2 * 2 + 1][5][5])d;
  s = (__global double(*)[64 / 2 * 2 + 1][5][5])e;
  t = (__global double(*)[64 / 2 * 2 + 1][5][5])f;
  u = (__global double(*)[64 / 2 * 2 + 1][5][5])g;
  v = (__global double(*)[64 / 2 * 2 + 1][5][5])h;

  for (k = 1; k < (i - 1); k++) {
    for (n = 0; n < 5; n++) {
      for (m = 0; m < 5; m++) {
        o[l][k][n][m] = 0.0;
        p[l][k][n][m] = 0.0;
        q[l][k][n][m] = 0.0;
        r[l][k][n][m] = 0.0;
        s[l][k][n][m] = 0.0;
        t[l][k][n][m] = 0.0;
        u[l][k][n][m] = 0.0;
        v[l][k][n][m] = 0.0;
      }
    }
  }
}

__kernel void G(__global double* a, double b, int c, int d, int e) {
  int f, g, h, i;
  __global double(*j)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];

  h = get_global_id(2) + 1;
  g = get_global_id(1) + 1;
  f = get_global_id(0) + 1;
  if (h >= (e - 1) || g >= (d - 1) || f >= (c - 1))
    return;

  j = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])a;

  for (i = 0; i < 5; i++) {
    j[h][g][f][i] = b * j[h][g][f][i];
  }
}

__kernel void H(__global double* a, __global double* b, double c, int d, int e, int f) {
  int g, h, i, j;
  __global double(*k)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*l)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];

  i = get_global_id(2) + 1;
  h = get_global_id(1) + 1;
  g = get_global_id(0) + 1;
  if (i >= (f - 1) || h >= (e - 1) || g >= (d - 1))
    return;

  k = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])a;
  l = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])b;

  for (j = 0; j < 5; j++) {
    k[i][h][g][j] = k[i][h][g][j] + c * l[i][h][g][j];
  }
}

__kernel void I(__global double* a, __global double* b, __global double* c, __global double* d, int e, int f, int g, int h, int i, int j) {
  int k, l, m, n;
  double o[5][5], p[5][5], q[5][5], r[5][5];
  double s, t, u;
  double v, w, x, y;
  double z[5][5], aa[5];
  __global double(*ab)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*ac)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*ad)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];
  __global double(*ae)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];

  k = get_global_id(1) + 1 + i;
  l = get_global_id(0) + 1 + j;
  m = h - get_global_id(1) - get_global_id(0) - i - j + 1;
  if (k >= e - 1 || l >= (f - 1) || m < 1 || m >= (g - 1))
    return;

  ab = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])a;
  ac = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])b;
  ad = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])c;
  ae = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])d;

  s = (4.0 / 3.0);
  t = 1.40e+00 * 1.00e-01 * 1.00e+00 * 1.40e+00;
  u = 1.00e-01 * 1.00e+00;

  w = ae[k][l][m];
  x = w * w;
  y = w * x;

  r[0][0] = 1.0 + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00);
  r[1][0] = 0.0;
  r[2][0] = 0.0;
  r[3][0] = 0.0;
  r[4][0] = 0.0;

  r[0][1] = -2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) * u * x * ac[k][l][m][1];
  r[1][1] = 1.0 + 2.0 * 2.0 * u * w * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00);
  r[2][1] = 0.0;
  r[3][1] = 0.0;
  r[4][1] = 0.0;

  r[0][2] = -2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) * u * x * ac[k][l][m][2];
  r[1][2] = 0.0;
  r[2][2] = 1.0 + 2.0 * 2.0 * u * w * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00);
  r[3][2] = 0.0;
  r[4][2] = 0.0;

  r[0][3] = -2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s) * u * x * ac[k][l][m][3];
  r[1][3] = 0.0;
  r[2][3] = 0.0;
  r[3][3] = 1.0 + 2.0 * 2.0 * u * w * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s) + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00);
  r[4][3] = 0.0;

  r[0][4] = -2.0 * 2.0 * ((((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t)) * (ac[k][l][m][1] * ac[k][l][m][1]) + ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t)) * (ac[k][l][m][2] * ac[k][l][m][2]) +
                           ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t)) * (ac[k][l][m][3] * ac[k][l][m][3])) *
                              y +
                          ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) * t * x * ac[k][l][m][4]);

  r[1][4] = 2.0 * 2.0 * x * ac[k][l][m][1] * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t));
  r[2][4] = 2.0 * 2.0 * x * ac[k][l][m][2] * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t));
  r[3][4] = 2.0 * 2.0 * x * ac[k][l][m][3] * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t));
  r[4][4] = 1.0 + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) * t * w + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00);

  w = ae[k - 1][l][m];
  x = w * w;
  y = w * x;

  o[0][0] = -2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00;
  o[1][0] = 0.0;
  o[2][0] = 0.0;
  o[3][0] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1))));
  o[4][0] = 0.0;

  o[0][1] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k - 1][l][m][1] * ac[k - 1][l][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k - 1][l][m][1]);
  o[1][1] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k - 1][l][m][3] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * u * w - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00;
  o[2][1] = 0.0;
  o[3][1] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k - 1][l][m][1] * w);
  o[4][1] = 0.0;

  o[0][2] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k - 1][l][m][2] * ac[k - 1][l][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k - 1][l][m][2]);
  o[1][2] = 0.0;
  o[2][2] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k - 1][l][m][3] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00;
  o[3][2] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k - 1][l][m][2] * w);
  o[4][2] = 0.0;

  o[0][3] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k - 1][l][m][3] * w) * (ac[k - 1][l][m][3] * w) + 0.40e+00 * ad[k - 1][l][m] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-s * u * x * ac[k - 1][l][m][3]);
  o[1][3] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k - 1][l][m][1] * w));
  o[2][3] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k - 1][l][m][2] * w));
  o[3][3] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (2.0 - 0.40e+00) * (ac[k - 1][l][m][3] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00;
  o[4][3] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * 0.40e+00;

  o[0][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * ((0.40e+00 * 2.0 * ad[k - 1][l][m] - 1.40e+00 * ac[k - 1][l][m][4]) * ac[k - 1][l][m][3] * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-(u - t) * y * (ac[k - 1][l][m][1] * ac[k - 1][l][m][1]) - (u - t) * y * (ac[k - 1][l][m][2] * ac[k - 1][l][m][2]) - (s * u - t) * y * (ac[k - 1][l][m][3] * ac[k - 1][l][m][3]) - t * x * ac[k - 1][l][m][4]);
  o[1][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k - 1][l][m][1] * ac[k - 1][l][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k - 1][l][m][1];
  o[2][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k - 1][l][m][2] * ac[k - 1][l][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k - 1][l][m][2];
  o[3][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k - 1][l][m][4] * w) - 0.40e+00 * (ad[k - 1][l][m] * w + ac[k - 1][l][m][3] * ac[k - 1][l][m][3] * x)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) * x * ac[k - 1][l][m][3];
  o[4][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k - 1][l][m][3] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * t * w - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00;

  w = ae[k][l - 1][m];
  x = w * w;
  y = w * x;

  p[0][0] = -2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  p[1][0] = 0.0;
  p[2][0] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1))));
  p[3][0] = 0.0;
  p[4][0] = 0.0;

  p[0][1] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l - 1][m][1] * ac[k][l - 1][m][2]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k][l - 1][m][1]);
  p[1][1] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l - 1][m][2] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  p[2][1] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l - 1][m][1] * w);
  p[3][1] = 0.0;
  p[4][1] = 0.0;

  p[0][2] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l - 1][m][2] * w) * (ac[k][l - 1][m][2] * w) + 0.40e+00 * (ad[k][l - 1][m] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-s * u * x * ac[k][l - 1][m][2]);
  p[1][2] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l - 1][m][1] * w));
  p[2][2] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * ((2.0 - 0.40e+00) * (ac[k][l - 1][m][2] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  p[3][2] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l - 1][m][3] * w));
  p[4][2] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * 0.40e+00;

  p[0][3] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l - 1][m][2] * ac[k][l - 1][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k][l - 1][m][3]);
  p[1][3] = 0.0;
  p[2][3] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l - 1][m][3] * w);
  p[3][3] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l - 1][m][2] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  p[4][3] = 0.0;

  p[0][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * ((0.40e+00 * 2.0 * ad[k][l - 1][m] - 1.40e+00 * ac[k][l - 1][m][4]) * (ac[k][l - 1][m][2] * x)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-(u - t) * y * (ac[k][l - 1][m][1] * ac[k][l - 1][m][1]) - (s * u - t) * y * (ac[k][l - 1][m][2] * ac[k][l - 1][m][2]) - (u - t) * y * (ac[k][l - 1][m][3] * ac[k][l - 1][m][3]) - t * x * ac[k][l - 1][m][4]);
  p[1][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l - 1][m][1] * ac[k][l - 1][m][2]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k][l - 1][m][1];
  p[2][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k][l - 1][m][4] * w) - 0.40e+00 * (ad[k][l - 1][m] * w + ac[k][l - 1][m][2] * ac[k][l - 1][m][2] * x)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) * x * ac[k][l - 1][m][2];
  p[3][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l - 1][m][2] * ac[k][l - 1][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k][l - 1][m][3];
  p[4][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k][l - 1][m][2] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * t * w - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;

  w = ae[k][l][m - 1];
  x = w * w;
  y = w * x;

  q[0][0] = -2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  q[1][0] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1))));
  q[2][0] = 0.0;
  q[3][0] = 0.0;
  q[4][0] = 0.0;

  q[0][1] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l][m - 1][1] * w) * (ac[k][l][m - 1][1] * w) + 0.40e+00 * ad[k][l][m - 1] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-s * u * x * ac[k][l][m - 1][1]);
  q[1][1] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * ((2.0 - 0.40e+00) * (ac[k][l][m - 1][1] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  q[2][1] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l][m - 1][2] * w));
  q[3][1] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l][m - 1][3] * w));
  q[4][1] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * 0.40e+00;

  q[0][2] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l][m - 1][1] * ac[k][l][m - 1][2]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k][l][m - 1][2]);
  q[1][2] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l][m - 1][2] * w);
  q[2][2] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l][m - 1][1] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  q[3][2] = 0.0;
  q[4][2] = 0.0;

  q[0][3] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l][m - 1][1] * ac[k][l][m - 1][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k][l][m - 1][3]);
  q[1][3] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l][m - 1][3] * w);
  q[2][3] = 0.0;
  q[3][3] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l][m - 1][1] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  q[4][3] = 0.0;

  q[0][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * ((0.40e+00 * 2.0 * ad[k][l][m - 1] - 1.40e+00 * ac[k][l][m - 1][4]) * ac[k][l][m - 1][1] * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-(s * u - t) * y * (ac[k][l][m - 1][1] * ac[k][l][m - 1][1]) - (u - t) * y * (ac[k][l][m - 1][2] * ac[k][l][m - 1][2]) - (u - t) * y * (ac[k][l][m - 1][3] * ac[k][l][m - 1][3]) - t * x * ac[k][l][m - 1][4]);
  q[1][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k][l][m - 1][4] * w) - 0.40e+00 * (ac[k][l][m - 1][1] * ac[k][l][m - 1][1] * x + ad[k][l][m - 1] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) * x * ac[k][l][m - 1][1];
  q[2][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l][m - 1][2] * ac[k][l][m - 1][1]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k][l][m - 1][2];
  q[3][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l][m - 1][3] * ac[k][l][m - 1][1]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k][l][m - 1][3];
  q[4][4] = -2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k][l][m - 1][1] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * t * w - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;

  for (n = 0; n < 5; n++) {
    aa[n] = ab[k][l][m][n] - 1.2 * (o[0][n] * ab[k - 1][l][m][0] + o[1][n] * ab[k - 1][l][m][1] + o[2][n] * ab[k - 1][l][m][2] + o[3][n] * ab[k - 1][l][m][3] + o[4][n] * ab[k - 1][l][m][4]);
  }

  for (n = 0; n < 5; n++) {
    aa[n] = aa[n] - 1.2 * (p[0][n] * ab[k][l - 1][m][0] + q[0][n] * ab[k][l][m - 1][0] + p[1][n] * ab[k][l - 1][m][1] + q[1][n] * ab[k][l][m - 1][1] + p[2][n] * ab[k][l - 1][m][2] + q[2][n] * ab[k][l][m - 1][2] + p[3][n] * ab[k][l - 1][m][3] + q[3][n] * ab[k][l][m - 1][3] + p[4][n] * ab[k][l - 1][m][4] + q[4][n] * ab[k][l][m - 1][4]);
  }

  for (n = 0; n < 5; n++) {
    z[n][0] = r[0][n];
    z[n][1] = r[1][n];
    z[n][2] = r[2][n];
    z[n][3] = r[3][n];
    z[n][4] = r[4][n];
  }

  w = 1.0 / z[0][0];
  v = w * z[1][0];
  z[1][1] = z[1][1] - v * z[0][1];
  z[1][2] = z[1][2] - v * z[0][2];
  z[1][3] = z[1][3] - v * z[0][3];
  z[1][4] = z[1][4] - v * z[0][4];
  aa[1] = aa[1] - aa[0] * v;

  v = w * z[2][0];
  z[2][1] = z[2][1] - v * z[0][1];
  z[2][2] = z[2][2] - v * z[0][2];
  z[2][3] = z[2][3] - v * z[0][3];
  z[2][4] = z[2][4] - v * z[0][4];
  aa[2] = aa[2] - aa[0] * v;

  v = w * z[3][0];
  z[3][1] = z[3][1] - v * z[0][1];
  z[3][2] = z[3][2] - v * z[0][2];
  z[3][3] = z[3][3] - v * z[0][3];
  z[3][4] = z[3][4] - v * z[0][4];
  aa[3] = aa[3] - aa[0] * v;

  v = w * z[4][0];
  z[4][1] = z[4][1] - v * z[0][1];
  z[4][2] = z[4][2] - v * z[0][2];
  z[4][3] = z[4][3] - v * z[0][3];
  z[4][4] = z[4][4] - v * z[0][4];
  aa[4] = aa[4] - aa[0] * v;

  w = 1.0 / z[1][1];
  v = w * z[2][1];
  z[2][2] = z[2][2] - v * z[1][2];
  z[2][3] = z[2][3] - v * z[1][3];
  z[2][4] = z[2][4] - v * z[1][4];
  aa[2] = aa[2] - aa[1] * v;

  v = w * z[3][1];
  z[3][2] = z[3][2] - v * z[1][2];
  z[3][3] = z[3][3] - v * z[1][3];
  z[3][4] = z[3][4] - v * z[1][4];
  aa[3] = aa[3] - aa[1] * v;

  v = w * z[4][1];
  z[4][2] = z[4][2] - v * z[1][2];
  z[4][3] = z[4][3] - v * z[1][3];
  z[4][4] = z[4][4] - v * z[1][4];
  aa[4] = aa[4] - aa[1] * v;

  w = 1.0 / z[2][2];
  v = w * z[3][2];
  z[3][3] = z[3][3] - v * z[2][3];
  z[3][4] = z[3][4] - v * z[2][4];
  aa[3] = aa[3] - aa[2] * v;

  v = w * z[4][2];
  z[4][3] = z[4][3] - v * z[2][3];
  z[4][4] = z[4][4] - v * z[2][4];
  aa[4] = aa[4] - aa[2] * v;

  w = 1.0 / z[3][3];
  v = w * z[4][3];
  z[4][4] = z[4][4] - v * z[3][4];
  aa[4] = aa[4] - aa[3] * v;

  ab[k][l][m][4] = aa[4] / z[4][4];

  aa[3] = aa[3] - z[3][4] * ab[k][l][m][4];
  ab[k][l][m][3] = aa[3] / z[3][3];

  aa[2] = aa[2] - z[2][3] * ab[k][l][m][3] - z[2][4] * ab[k][l][m][4];
  ab[k][l][m][2] = aa[2] / z[2][2];

  aa[1] = aa[1] - z[1][2] * ab[k][l][m][2] - z[1][3] * ab[k][l][m][3] - z[1][4] * ab[k][l][m][4];
  ab[k][l][m][1] = aa[1] / z[1][1];

  aa[0] = aa[0] - z[0][1] * ab[k][l][m][1] - z[0][2] * ab[k][l][m][2] - z[0][3] * ab[k][l][m][3] - z[0][4] * ab[k][l][m][4];
  ab[k][l][m][0] = aa[0] / z[0][0];
}

__kernel void J(__global double* a, __global double* b, __global double* c, __global double* d, int e, int f, int g, int h, int i, int j) {
  int k, l, m, n;
  double o[5][5], p[5][5], q[5][5], r[5][5];
  double s, t, u;
  double v, w, x, y;
  double z[5][5], aa[5];
  __global double(*ab)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*ac)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5];
  __global double(*ad)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];
  __global double(*ae)[64 / 2 * 2 + 1][64 / 2 * 2 + 1];

  k = get_global_id(1) + 1 + i;
  l = get_global_id(0) + 1 + j;
  m = h - get_global_id(1) - get_global_id(0) - i - j + 1;
  if (k >= e - 1 || l >= (f - 1) || m < 1 || m >= (g - 1))
    return;

  ab = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])a;
  ac = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1][5])b;
  ad = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])c;
  ae = (__global double(*)[64 / 2 * 2 + 1][64 / 2 * 2 + 1])d;

  s = (4.0 / 3.0);
  t = 1.40e+00 * 1.00e-01 * 1.00e+00 * 1.40e+00;
  u = 1.00e-01 * 1.00e+00;

  w = ae[k][l][m];
  x = w * w;
  y = w * x;

  r[0][0] = 1.0 + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00);
  r[1][0] = 0.0;
  r[2][0] = 0.0;
  r[3][0] = 0.0;
  r[4][0] = 0.0;

  r[0][1] = 2.0 * 2.0 * (-(1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s - (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) - (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) * (u * x * ac[k][l][m][1]);
  r[1][1] = 1.0 + 2.0 * 2.0 * u * w * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00);
  r[2][1] = 0.0;
  r[3][1] = 0.0;
  r[4][1] = 0.0;

  r[0][2] = 2.0 * 2.0 * (-(1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) - (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s - (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) * (u * x * ac[k][l][m][2]);
  r[1][2] = 0.0;
  r[2][2] = 1.0 + 2.0 * 2.0 * u * w * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00);
  r[3][2] = 0.0;
  r[4][2] = 0.0;

  r[0][3] = 2.0 * 2.0 * (-(1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) - (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) - (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s) * (u * x * ac[k][l][m][3]);
  r[1][3] = 0.0;
  r[2][3] = 0.0;
  r[3][3] = 1.0 + 2.0 * 2.0 * u * w * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * s) + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00);
  r[4][3] = 0.0;

  r[0][4] = -2.0 * 2.0 * ((((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t)) * (ac[k][l][m][1] * ac[k][l][m][1]) + ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t)) * (ac[k][l][m][2] * ac[k][l][m][2]) +
                           ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t)) * (ac[k][l][m][3] * ac[k][l][m][3])) *
                              y +
                          ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) * t * x * ac[k][l][m][4]);

  r[1][4] = 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t)) * x * ac[k][l][m][1];
  r[2][4] = 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t)) * x * ac[k][l][m][2];
  r[3][4] = 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t)) * x * ac[k][l][m][3];
  r[4][4] = 1.0 + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1))))) * t * w + 2.0 * 2.0 * ((1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75 + (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00);

  w = ae[k][l][m + 1];
  x = w * w;
  y = w * x;

  o[0][0] = -2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  o[1][0] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1))));
  o[2][0] = 0.0;
  o[3][0] = 0.0;
  o[4][0] = 0.0;

  o[0][1] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l][m + 1][1] * w) * (ac[k][l][m + 1][1] * w) + 0.40e+00 * ad[k][l][m + 1] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-s * u * x * ac[k][l][m + 1][1]);
  o[1][1] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * ((2.0 - 0.40e+00) * (ac[k][l][m + 1][1] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  o[2][1] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l][m + 1][2] * w));
  o[3][1] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l][m + 1][3] * w));
  o[4][1] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * 0.40e+00;

  o[0][2] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l][m + 1][1] * ac[k][l][m + 1][2]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k][l][m + 1][2]);
  o[1][2] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l][m + 1][2] * w);
  o[2][2] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l][m + 1][1] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  o[3][2] = 0.0;
  o[4][2] = 0.0;

  o[0][3] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l][m + 1][1] * ac[k][l][m + 1][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k][l][m + 1][3]);
  o[1][3] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l][m + 1][3] * w);
  o[2][3] = 0.0;
  o[3][3] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l][m + 1][1] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  o[4][3] = 0.0;

  o[0][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * ((0.40e+00 * 2.0 * ad[k][l][m + 1] - 1.40e+00 * ac[k][l][m + 1][4]) * (ac[k][l][m + 1][1] * x)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-(s * u - t) * y * (ac[k][l][m + 1][1] * ac[k][l][m + 1][1]) - (u - t) * y * (ac[k][l][m + 1][2] * ac[k][l][m + 1][2]) - (u - t) * y * (ac[k][l][m + 1][3] * ac[k][l][m + 1][3]) - t * x * ac[k][l][m + 1][4]);
  o[1][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k][l][m + 1][4] * w) - 0.40e+00 * (ac[k][l][m + 1][1] * ac[k][l][m + 1][1] * x + ad[k][l][m + 1] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) * x * ac[k][l][m + 1][1];
  o[2][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l][m + 1][2] * ac[k][l][m + 1][1]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k][l][m + 1][2];
  o[3][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l][m + 1][3] * ac[k][l][m + 1][1]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k][l][m + 1][3];
  o[4][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k][l][m + 1][1] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * t * w - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;

  w = ae[k][l + 1][m];
  x = w * w;
  y = w * x;

  p[0][0] = -2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  p[1][0] = 0.0;
  p[2][0] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1))));
  p[3][0] = 0.0;
  p[4][0] = 0.0;

  p[0][1] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l + 1][m][1] * ac[k][l + 1][m][2]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k][l + 1][m][1]);
  p[1][1] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l + 1][m][2] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  p[2][1] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l + 1][m][1] * w);
  p[3][1] = 0.0;
  p[4][1] = 0.0;

  p[0][2] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l + 1][m][2] * w) * (ac[k][l + 1][m][2] * w) + 0.40e+00 * (ad[k][l + 1][m] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-s * u * x * ac[k][l + 1][m][2]);
  p[1][2] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l + 1][m][1] * w));
  p[2][2] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * ((2.0 - 0.40e+00) * (ac[k][l + 1][m][2] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  p[3][2] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l + 1][m][3] * w));
  p[4][2] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * 0.40e+00;

  p[0][3] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k][l + 1][m][2] * ac[k][l + 1][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k][l + 1][m][3]);
  p[1][3] = 0.0;
  p[2][3] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l + 1][m][3] * w);
  p[3][3] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k][l + 1][m][2] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;
  p[4][3] = 0.0;

  p[0][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * ((0.40e+00 * 2.0 * ad[k][l + 1][m] - 1.40e+00 * ac[k][l + 1][m][4]) * (ac[k][l + 1][m][2] * x)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-(u - t) * y * (ac[k][l + 1][m][1] * ac[k][l + 1][m][1]) - (s * u - t) * y * (ac[k][l + 1][m][2] * ac[k][l + 1][m][2]) - (u - t) * y * (ac[k][l + 1][m][3] * ac[k][l + 1][m][3]) - t * x * ac[k][l + 1][m][4]);
  p[1][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l + 1][m][1] * ac[k][l + 1][m][2]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k][l + 1][m][1];
  p[2][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k][l + 1][m][4] * w) - 0.40e+00 * (ad[k][l + 1][m] * w + ac[k][l + 1][m][2] * ac[k][l + 1][m][2] * x)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) * x * ac[k][l + 1][m][2];
  p[3][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k][l + 1][m][2] * ac[k][l + 1][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k][l + 1][m][3];
  p[4][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k][l + 1][m][2] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * t * w - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 0.75;

  w = ae[k + 1][l][m];
  x = w * w;
  y = w * x;

  q[0][0] = -2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00;
  q[1][0] = 0.0;
  q[2][0] = 0.0;
  q[3][0] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1))));
  q[4][0] = 0.0;

  q[0][1] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k + 1][l][m][1] * ac[k + 1][l][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k + 1][l][m][1]);
  q[1][1] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k + 1][l][m][3] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * u * w - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00;
  q[2][1] = 0.0;
  q[3][1] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k + 1][l][m][1] * w);
  q[4][1] = 0.0;

  q[0][2] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k + 1][l][m][2] * ac[k + 1][l][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-u * x * ac[k + 1][l][m][2]);
  q[1][2] = 0.0;
  q[2][2] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k + 1][l][m][3] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00;
  q[3][2] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (ac[k + 1][l][m][2] * w);
  q[4][2] = 0.0;

  q[0][3] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-(ac[k + 1][l][m][3] * w) * (ac[k + 1][l][m][3] * w) + 0.40e+00 * (ad[k + 1][l][m] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-s * u * x * ac[k + 1][l][m][3]);
  q[1][3] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k + 1][l][m][1] * w));
  q[2][3] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k + 1][l][m][2] * w));
  q[3][3] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (2.0 - 0.40e+00) * (ac[k + 1][l][m][3] * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u * w) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00;
  q[4][3] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * 0.40e+00;

  q[0][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * ((0.40e+00 * 2.0 * ad[k + 1][l][m] - 1.40e+00 * ac[k + 1][l][m][4]) * (ac[k + 1][l][m][3] * x)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (-(u - t) * y * (ac[k + 1][l][m][1] * ac[k + 1][l][m][1]) - (u - t) * y * (ac[k + 1][l][m][2] * ac[k + 1][l][m][2]) - (s * u - t) * y * (ac[k + 1][l][m][3] * ac[k + 1][l][m][3]) - t * x * ac[k + 1][l][m][4]);
  q[1][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k + 1][l][m][1] * ac[k + 1][l][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k + 1][l][m][1];
  q[2][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (-0.40e+00 * (ac[k + 1][l][m][2] * ac[k + 1][l][m][3]) * x) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (u - t) * x * ac[k + 1][l][m][2];
  q[3][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k + 1][l][m][4] * w) - 0.40e+00 * (ad[k + 1][l][m] * w + ac[k + 1][l][m][3] * ac[k + 1][l][m][3] * x)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * (s * u - t) * x * ac[k + 1][l][m][3];
  q[4][4] = 2.0 * (1.0 / (2.0 * (1.0 / (64 - 1)))) * (1.40e+00 * (ac[k + 1][l][m][3] * w)) - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * t * w - 2.0 * (1.0 / ((1.0 / (64 - 1)) * (1.0 / (64 - 1)))) * 1.00;

  for (n = 0; n < 5; n++) {
    aa[n] = 1.2 * (q[0][n] * ab[k + 1][l][m][0] + q[1][n] * ab[k + 1][l][m][1] + q[2][n] * ab[k + 1][l][m][2] + q[3][n] * ab[k + 1][l][m][3] + q[4][n] * ab[k + 1][l][m][4]);
  }
  for (n = 0; n < 5; n++) {
    aa[n] = aa[n] + 1.2 * (p[0][n] * ab[k][l + 1][m][0] + o[0][n] * ab[k][l][m + 1][0] + p[1][n] * ab[k][l + 1][m][1] + o[1][n] * ab[k][l][m + 1][1] + p[2][n] * ab[k][l + 1][m][2] + o[2][n] * ab[k][l][m + 1][2] + p[3][n] * ab[k][l + 1][m][3] + o[3][n] * ab[k][l][m + 1][3] + p[4][n] * ab[k][l + 1][m][4] + o[4][n] * ab[k][l][m + 1][4]);
  }

  for (n = 0; n < 5; n++) {
    z[n][0] = r[0][n];
    z[n][1] = r[1][n];
    z[n][2] = r[2][n];
    z[n][3] = r[3][n];
    z[n][4] = r[4][n];
  }

  w = 1.0 / z[0][0];
  v = w * z[1][0];
  z[1][1] = z[1][1] - v * z[0][1];
  z[1][2] = z[1][2] - v * z[0][2];
  z[1][3] = z[1][3] - v * z[0][3];
  z[1][4] = z[1][4] - v * z[0][4];
  aa[1] = aa[1] - aa[0] * v;

  v = w * z[2][0];
  z[2][1] = z[2][1] - v * z[0][1];
  z[2][2] = z[2][2] - v * z[0][2];
  z[2][3] = z[2][3] - v * z[0][3];
  z[2][4] = z[2][4] - v * z[0][4];
  aa[2] = aa[2] - aa[0] * v;

  v = w * z[3][0];
  z[3][1] = z[3][1] - v * z[0][1];
  z[3][2] = z[3][2] - v * z[0][2];
  z[3][3] = z[3][3] - v * z[0][3];
  z[3][4] = z[3][4] - v * z[0][4];
  aa[3] = aa[3] - aa[0] * v;

  v = w * z[4][0];
  z[4][1] = z[4][1] - v * z[0][1];
  z[4][2] = z[4][2] - v * z[0][2];
  z[4][3] = z[4][3] - v * z[0][3];
  z[4][4] = z[4][4] - v * z[0][4];
  aa[4] = aa[4] - aa[0] * v;

  w = 1.0 / z[1][1];
  v = w * z[2][1];
  z[2][2] = z[2][2] - v * z[1][2];
  z[2][3] = z[2][3] - v * z[1][3];
  z[2][4] = z[2][4] - v * z[1][4];
  aa[2] = aa[2] - aa[1] * v;

  v = w * z[3][1];
  z[3][2] = z[3][2] - v * z[1][2];
  z[3][3] = z[3][3] - v * z[1][3];
  z[3][4] = z[3][4] - v * z[1][4];
  aa[3] = aa[3] - aa[1] * v;

  v = w * z[4][1];
  z[4][2] = z[4][2] - v * z[1][2];
  z[4][3] = z[4][3] - v * z[1][3];
  z[4][4] = z[4][4] - v * z[1][4];
  aa[4] = aa[4] - aa[1] * v;

  w = 1.0 / z[2][2];
  v = w * z[3][2];
  z[3][3] = z[3][3] - v * z[2][3];
  z[3][4] = z[3][4] - v * z[2][4];
  aa[3] = aa[3] - aa[2] * v;

  v = w * z[4][2];
  z[4][3] = z[4][3] - v * z[2][3];
  z[4][4] = z[4][4] - v * z[2][4];
  aa[4] = aa[4] - aa[2] * v;

  w = 1.0 / z[3][3];
  v = w * z[4][3];
  z[4][4] = z[4][4] - v * z[3][4];
  aa[4] = aa[4] - aa[3] * v;

  aa[4] = aa[4] / z[4][4];

  aa[3] = aa[3] - z[3][4] * aa[4];
  aa[3] = aa[3] / z[3][3];

  aa[2] = aa[2] - z[2][3] * aa[3] - z[2][4] * aa[4];
  aa[2] = aa[2] / z[2][2];

  aa[1] = aa[1] - z[1][2] * aa[2] - z[1][3] * aa[3] - z[1][4] * aa[4];
  aa[1] = aa[1] / z[1][1];

  aa[0] = aa[0] - z[0][1] * aa[1] - z[0][2] * aa[2] - z[0][3] * aa[3] - z[0][4] * aa[4];
  aa[0] = aa[0] / z[0][0];

  ab[k][l][m][0] = ab[k][l][m][0] - aa[0];
  ab[k][l][m][1] = ab[k][l][m][1] - aa[1];
  ab[k][l][m][2] = ab[k][l][m][2] - aa[2];
  ab[k][l][m][3] = ab[k][l][m][3] - aa[3];
  ab[k][l][m][4] = ab[k][l][m][4] - aa[4];
}