typedef float DATA_TYPE; __kernel __attribute__((reqd_work_group_size(1, 1, 1))) void A(__global DATA_TYPE* a, __global DATA_TYPE* b, int c) {
  __local DATA_TYPE d[(32 + 2 * 16) * (32 + 2 * 16)];
  __local DATA_TYPE e[(32 + 2 * 16) * (32 + 2 * 16)];
  int f = get_group_id(0);
  int g = get_group_id(1);

  int h, i;
  if (g == 0) {
    if (f == 0) {
      for (h = 0; h < 32 + 16; ++h) {
        async_work_group_copy(&d[(32 + 16) * h], &a[(g * 32 + h) * 1024 + f * 32], 32 + 16, 0);
      }
    } else if (f < 1024 / 32 - 1) {
      for (h = 0; h < 32 + 16; ++h) {
        async_work_group_copy(&d[(32 + 2 * 16) * h], &a[(g * 32 + h) * 1024 + f * 32 - 16], 32 + 2 * 16, 0);
      }
    } else {
      for (h = 0; h < 32 + 16; ++h) {
        async_work_group_copy(&d[(32 + 16) * h], &a[(g * 32 + h) * 1024 + f * 32 - 16], 32 + 16, 0);
      }
    }
  } else if (g < 1024 / 32 - 1) {
    if (f == 0) {
      for (h = 0; h < 32 + 2 * 16; ++h) {
        async_work_group_copy(&d[(32 + 16) * h], &a[(g * 32 + h - 16) * 1024 + f * 32], 32 + 16, 0);
      }
    } else if (f < 1024 / 32 - 1) {
      for (h = 0; h < 32 + 2 * 16; ++h) {
        async_work_group_copy(&d[(32 + 2 * 16) * h], &a[(g * 32 + h - 16) * 1024 + f * 32 - 16], 32 + 2 * 16, 0);
      }
    } else {
      for (h = 0; h < 32 + 2 * 16; ++h) {
        async_work_group_copy(&d[(32 + 16) * h], &a[(g * 32 + h - 16) * 1024 + f * 32 - 16], 32 + 16, 0);
      }
    }
  } else {
    if (f == 0) {
      for (h = 0; h < 32 + 16; ++h) {
        async_work_group_copy(&d[(32 + 16) * h], &a[(g * 32 + h - 16) * 1024 + f * 32], 32 + 16, 0);
      }
    } else if (f < 1024 / 32 - 1) {
      for (h = 0; h < 32 + 16; ++h) {
        async_work_group_copy(&d[(32 + 2 * 16) * h], &a[(g * 32 + h - 16) * 1024 + f * 32 - 16], 32 + 2 * 16, 0);
      }
    } else {
      for (h = 0; h < 32 + 16; ++h) {
        async_work_group_copy(&d[(32 + 16) * h], &a[(g * 32 + h - 16) * 1024 + f * 32 - 16], 32 + 16, 0);
      }
    }
  }
  barrier(1);

  int j;
  for (j = 1; j <= 16; ++j) {
    if (g == 0) {
      if (f == 0) {
        for (i = 1; i <= 32 + 16 - 1 - j; ++i) {
          for (h = 1; h <= 32 + 16 - 1 - j; ++h) {
            e[i * (32 + 16) + h] = 0.2f * (d[i * (32 + 16) + h] + d[i * (32 + 16) + (h - 1)] + d[i * (32 + 16) + (h + 1)] + d[(i + 1) * (32 + 16) + h] + d[(i - 1) * (32 + 16) + h]);
          }
        }

        for (i = 1; i <= 32 + 16 - 1 - j; ++i) {
          for (h = 1; h <= 32 + 16 - 1 - j; ++h) {
            d[i * (32 + 16) + h] = e[i * (32 + 16) + h];
          }
        }
      } else if (f < 1024 / 32 - 1) {
        for (i = 1; i <= 32 + 16 - 1 - j; ++i) {
          for (h = j; h <= 32 + 2 * 16 - 1 - j; ++h) {
            e[i * (32 + 2 * 16) + h] = 0.2f * (d[i * (32 + 2 * 16) + h] + d[i * (32 + 2 * 16) + (h - 1)] + d[i * (32 + 2 * 16) + (h + 1)] + d[(i + 1) * (32 + 2 * 16) + h] + d[(i - 1) * (32 + 2 * 16) + h]);
          }
        }

        for (i = 1; i <= 32 + 16 - 1 - j; ++i) {
          for (h = j; h <= 32 + 2 * 16 - 1 - j; ++h) {
            d[i * (32 + 2 * 16) + h] = e[i * (32 + 2 * 16) + h];
          }
        }
      } else {
        for (i = 1; i <= 32 + 16 - 1 - j; ++i) {
          for (h = j; h <= 32 + 16 - 2; ++h) {
            e[i * (32 + 16) + h] = 0.2f * (d[i * (32 + 16) + h] + d[i * (32 + 16) + (h - 1)] + d[i * (32 + 16) + (h + 1)] + d[(i + 1) * (32 + 16) + h] + d[(i - 1) * (32 + 16) + h]);
          }
        }

        for (i = 1; i <= 32 + 16 - 1 - j; ++i) {
          for (h = j; h <= 32 + 16 - 2; ++h) {
            d[i * (32 + 16) + h] = e[i * (32 + 16) + h];
          }
        }
      }
    } else if (g < 1024 / 32 - 1) {
      if (f == 0) {
        for (i = j; i <= 32 + 2 * 16 - 1 - j; ++i) {
          for (h = 1; h <= 32 + 16 - 1 - j; ++h) {
            e[i * (32 + 16) + h] = 0.2f * (d[i * (32 + 16) + h] + d[i * (32 + 16) + (h - 1)] + d[i * (32 + 16) + (h + 1)] + d[(i + 1) * (32 + 16) + h] + d[(i - 1) * (32 + 16) + h]);
          }
        }

        for (i = j; i <= 32 + 2 * 16 - 1 - j; ++i) {
          for (h = 1; h <= 32 + 16 - 1 - j; ++h) {
            d[i * (32 + 16) + h] = e[i * (32 + 16) + h];
          }
        }
      } else if (f < 1024 / 32 - 1) {
        for (i = j; i <= 32 + 2 * 16 - 1 - j; ++i) {
          for (h = j; h <= 32 + 2 * 16 - 1 - j; ++h) {
            e[i * (32 + 2 * 16) + h] = 0.2f * (d[i * (32 + 2 * 16) + h] + d[i * (32 + 2 * 16) + (h - 1)] + d[i * (32 + 2 * 16) + (h + 1)] + d[(i + 1) * (32 + 2 * 16) + h] + d[(i - 1) * (32 + 2 * 16) + h]);
          }
        }

        for (i = j; i <= 32 + 2 * 16 - 1 - j; ++i) {
          for (h = j; h <= 32 + 2 * 16 - 1 - j; ++h) {
            d[i * (32 + 2 * 16) + h] = e[i * (32 + 2 * 16) + h];
          }
        }
      } else {
        for (i = j; i <= 32 + 2 * 16 - 1 - j; ++i) {
          for (h = j; h <= 32 + 16 - 2; ++h) {
            e[i * (32 + 16) + h] = 0.2f * (d[i * (32 + 16) + h] + d[i * (32 + 16) + (h - 1)] + d[i * (32 + 16) + (h + 1)] + d[(i + 1) * (32 + 16) + h] + d[(i - 1) * (32 + 16) + h]);
          }
        }

        for (i = j; i <= 32 + 2 * 16 - 1 - j; ++i) {
          for (h = j; h <= 32 + 16 - 2; ++h) {
            d[i * (32 + 16) + h] = e[i * (32 + 16) + h];
          }
        }
      }
    } else {
      if (f == 0) {
        for (i = j; i <= 32 + 16 - 2; ++i) {
          for (h = 1; h <= 32 + 16 - 1 - j; ++h) {
            e[i * (32 + 16) + h] = 0.2f * (d[i * (32 + 16) + h] + d[i * (32 + 16) + (h - 1)] + d[i * (32 + 16) + (h + 1)] + d[(i + 1) * (32 + 16) + h] + d[(i - 1) * (32 + 16) + h]);
          }
        }

        for (i = j; i <= 32 + 16 - 2; ++i) {
          for (h = 1; h <= 32 + 16 - 1 - j; ++h) {
            d[i * (32 + 16) + h] = e[i * (32 + 16) + h];
          }
        }
      } else if (f < 1024 / 32 - 1) {
        for (i = j; i <= 32 + 16 - 2; ++i) {
          for (h = j; h <= 32 + 2 * 16 - 1 - j; ++h) {
            e[i * (32 + 2 * 16) + h] = 0.2f * (d[i * (32 + 2 * 16) + h] + d[i * (32 + 2 * 16) + (h - 1)] + d[i * (32 + 2 * 16) + (h + 1)] + d[(i + 1) * (32 + 2 * 16) + h] + d[(i - 1) * (32 + 2 * 16) + h]);
          }
        }

        for (i = j; i <= 32 + 16 - 2; ++i) {
          for (h = j; h <= 32 + 2 * 16 - 1 - j; ++h) {
            d[i * (32 + 2 * 16) + h] = e[i * (32 + 2 * 16) + h];
          }
        }
      } else {
        for (i = j; i <= 32 + 16 - 2; ++i) {
          for (h = j; h <= 32 + 16 - 2; ++h) {
            e[i * (32 + 16) + h] = 0.2f * (d[i * (32 + 16) + h] + d[i * (32 + 16) + (h - 1)] + d[i * (32 + 16) + (h + 1)] + d[(i + 1) * (32 + 16) + h] + d[(i - 1) * (32 + 16) + h]);
          }
        }

        for (i = j; i <= 32 + 16 - 2; ++i) {
          for (h = j; h <= 32 + 16 - 2; ++h) {
            d[i * (32 + 16) + h] = e[i * (32 + 16) + h];
          }
        }
      }
    }
  }
  barrier(1);

  if (g == 0) {
    if (f == 0) {
      for (i = 0; i <= 32 - 1; ++i) {
        async_work_group_copy(&a[(g * 32 + i) * 1024 + f * 32], &d[(32 + 16) * i], 32, 0);
      }
    } else if (f < 1024 / 32 - 1) {
      for (i = 0; i <= 32 - 1; ++i) {
        async_work_group_copy(&a[(g * 32 + i) * 1024 + f * 32], &d[(32 + 2 * 16) * i + 16], 32, 0);
      }
    } else {
      for (i = 0; i <= 32 - 1; ++i) {
        async_work_group_copy(&a[(g * 32 + i) * 1024 + f * 32], &d[(32 + 16) * i + 16], 32, 0);
      }
    }
  } else if (g < 1024 / 32 - 1) {
    if (f == 0) {
      for (i = 0; i <= 32 - 1; ++i) {
        async_work_group_copy(&a[(g * 32 + i) * 1024 + f * 32], &d[(32 + 16) * (i + 16)], 32, 0);
      }
    } else if (f < 1024 / 32 - 1) {
      for (i = 0; i <= 32 - 1; ++i) {
        async_work_group_copy(&a[(g * 32 + i) * 1024 + f * 32], &d[(32 + 2 * 16) * (i + 16) + 16], 32, 0);
      }
    } else {
      for (i = 0; i <= 32 - 1; ++i) {
        async_work_group_copy(&a[(g * 32 + i) * 1024 + f * 32], &d[(32 + 16) * (i + 16) + 16], 32, 0);
      }
    }
  } else {
    if (f == 0) {
      for (i = 0; i <= 32 - 1; ++i) {
        async_work_group_copy(&a[(g * 32 + i) * 1024 + f * 32], &d[(32 + 16) * (i + 16)], 32, 0);
      }
    } else if (f < 1024 / 32 - 1) {
      for (i = 0; i <= 32 - 1; ++i) {
        async_work_group_copy(&a[(g * 32 + i) * 1024 + f * 32], &d[(32 + 2 * 16) * (i + 16) + 16], 32, 0);
      }
    } else {
      for (i = 0; i <= 32 - 1; ++i) {
        async_work_group_copy(&a[(g * 32 + i) * 1024 + f * 32], &d[(32 + 16) * (i + 16) + 16], 32, 0);
      }
    }
  }
}