typedef double special_func_scalar_type; special_func_scalar_type A(special_func_scalar_type a, __constant const special_func_scalar_type* b, int c) {
  special_func_scalar_type d;
  int e;
  __constant const special_func_scalar_type* f;

  f = b;
  d = *f++;
  e = c;

  do
    d = d * a + *f++;
  while (--e);

  return (d);
}

special_func_scalar_type B(special_func_scalar_type a, __constant const special_func_scalar_type* b, int c) {
  special_func_scalar_type d;
  __constant const special_func_scalar_type* e;
  int f;

  e = b;
  d = a + *e++;
  f = c - 1;

  do
    d = d * a + *e++;
  while (--f);

  return (d);
}

special_func_scalar_type C(__constant const special_func_scalar_type* a, __constant const special_func_scalar_type* b, special_func_scalar_type c, int d) {
  special_func_scalar_type e, f;
  if (c <= 1) {
    e = a[d - 1];
    f = b[d - 1];
    for (int g = (int)d - 2; g >= 0; --g) {
      e *= c;
      f *= c;
      e += a[g];
      f += b[g];
    }
  } else {
    c = 1 / c;
    e = a[0];
    f = b[0];
    for (unsigned g = 1; g < d; ++g) {
      e *= c;
      f *= c;
      e += a[g];
      f += b[g];
    }
  }
  return e / f;
}
__constant const double Ga = 103.892;

__constant const double Gb = 1.732050807568877293527;
__constant const double Gc = 5.64189583547756286948E-1;

__constant const double Gd = 0.35502805388781723926;
__constant const double Ge = 0.258819403792806798405;

__constant const unsigned short Gf[32] = {
    0x3fd6, 0x2dae, 0x2537, 0xb658, 0x4028, 0x03e3, 0x871a, 0x9067, 0x4053, 0x11e5, 0x0de2, 0xe1e3, 0x4065, 0x02da, 0xee40, 0x073c, 0x4063, 0xf834, 0x5ba1, 0xfddf, 0x4051, 0xa24f, 0x4f4c, 0xea4f, 0x402c, 0x0d8d, 0x5c2a, 0x0f4d, 0x3ff0, 0x0000, 0x0000, 0x0000,
};
__constant const unsigned short Gg[32] = {
    0x3fe2, 0x29bc, 0x0262, 0x4d31, 0x402d, 0x8334, 0x0533, 0x2ca5, 0x4055, 0x20e3, 0xb04d, 0x51a0, 0x4066, 0x2a2d, 0xc730, 0xb7b0, 0x4064, 0x8782, 0x9a9f, 0xfa61, 0x4051, 0xde94, 0xee91, 0xd35f, 0x402c, 0x311b, 0x950d, 0x9d81, 0x3ff0, 0x0000, 0x0000, 0x0000,
};

__constant const unsigned short Gh[32] = {
    0x3fe3, 0xa3ea, 0x4d4c, 0xab3e, 0x402d, 0x7dad, 0xdc67, 0x2bcf, 0x4054, 0x83bd, 0x0724, 0xa9a6, 0x4065, 0x65e9, 0xba99, 0xc9ba, 0x4063, 0xea2b, 0xcdc2, 0x64d7, 0x4051, 0x7e95, 0x41d4, 0x1646, 0x402b, 0xe4e8, 0x6aa7, 0x4099, 0x3ff0, 0x0000, 0x0000, 0x0000,
};
__constant const unsigned short Gi[32] = {
    0x3fd5, 0x6397, 0xd288, 0xd5b3, 0x4026, 0x5caf, 0xedc9, 0x327e, 0x4051, 0xcb0e, 0x1800, 0x97e6, 0x4063, 0xd8e6, 0x1132, 0xdbd1, 0x4063, 0x269b, 0x0dcb, 0x3316, 0x4051, 0x2b36, 0xf9d0, 0xf72f, 0x402b, 0xb321, 0x4e35, 0x7982, 0x3ff0, 0x0000, 0x0000, 0x0000,
};

__constant const unsigned short Gj[20] = {
    0xbfd0, 0x3518, 0xe211, 0x6751, 0x3fe2, 0x68bc, 0x7072, 0x2383, 0xbfd5, 0x1d32, 0x6785, 0xcf29, 0x3fb0, 0x7f2a, 0xa027, 0x78a8, 0xbf6f, 0x5604, 0x2dba, 0xcd1b,
};
__constant const unsigned short Gk[20] = {

    0xc01c, 0xa09d, 0x891b, 0xab58, 0x4025, 0x3539, 0xfe0b, 0x1101, 0xc014, 0xee0b, 0xa9a7, 0x70e8, 0x3fee, 0xa2fc, 0xa6da, 0x95ff, 0xbfac, 0x33d0, 0x8f8e, 0x86c9,
};

__constant const unsigned short Gl[20] = {
    0x3fdd, 0xca1d, 0x9deb, 0x377b, 0xbff1, 0x7051, 0xc6be, 0xe420, 0x3fe4, 0x710c, 0xf199, 0x5ff3, 0xbfc0, 0x3c6f, 0x8681, 0xa8fa, 0x3f7f, 0x3b43, 0xb8ce, 0xb896,
};
__constant const unsigned short Gm[20] = {

    0xc021, 0x6996, 0xb340, 0xbc45, 0x402b, 0xcc73, 0x2ea4, 0xbb8b, 0xc01c, 0x908c, 0xa04a, 0xed59, 0x3ff5, 0x70fd, 0xf9a5, 0x70a9, 0xbfb4, 0x13d0, 0x1b60, 0x52e8,
};

__constant const unsigned short Gn[36] = {
    0xbfc0, 0xdb6c, 0xd50a, 0xe6fb, 0xbfe4, 0x0bee, 0x9856, 0x6852, 0xbfe6, 0x2e59, 0xc2f7, 0x9f7d, 0xbfd1, 0xe7ea, 0x4bb3, 0xf40b, 0xbfa9, 0x2f6e, 0xf47d, 0xbd8a, 0xbf70, 0xa401, 0xc8d9, 0xe090, 0xbf24, 0xe06e, 0xaf4b, 0x009c, 0xbec7, 0x4a78, 0x1d42, 0x366d, 0xbe52, 0x041c, 0xf68e, 0xa2d2,
};
__constant const unsigned short Go[36] = {

    0x402a, 0xb64b, 0x2572, 0xedf2, 0x4040, 0x575c, 0x4478, 0x7b1a, 0x403a, 0xbc98, 0xa3b7, 0x3410, 0x4022, 0x5fc8, 0x2ac9, 0x9873, 0x3ff7, 0x9acb, 0x39de, 0x9319, 0x3fbd, 0x9dac, 0xb404, 0x5a2b, 0x3f72, 0x08ca, 0xe03a, 0xf617, 0x3f13, 0xc8d7, 0xaf76, 0xe73b, 0x3e9e, 0x52b9, 0xb995, 0x18a7,
};

__constant const unsigned short Gp[44] = {
    0x3f94, 0x3525, 0xddcf, 0xbbde, 0x3fd9, 0x07d5, 0x0064, 0x37b7, 0x3ff1, 0x0d83, 0x3a20, 0x34eb, 0x3fee, 0x0dac, 0xa0ef, 0x1acb, 0x3fd6, 0x7e69, 0xcea8, 0xfe1d, 0x3fb0, 0x3a41, 0x21e9, 0x0978, 0x3f77, 0xfe99, 0xf12f, 0x5043, 0x3f32, 0x8976, 0x600e, 0x17a2, 0x3edd, 0x4f3d, 0x69f8, 0x574e, 0x3e75, 0xca92, 0xbbad, 0x11c8, 0x3df7, 0x78a4, 0x7d97, 0xee7a,
};
__constant const unsigned short Gq[40] = {

    0x4022, 0x9e2b, 0xf3d5, 0x6b40, 0x4033, 0xd5d5, 0xc0ef, 0x18d4, 0x402f, 0x211b, 0x7ea7, 0xdc35, 0x4015, 0xe84e, 0x2b79, 0xdbce, 0x3fee, 0x8992, 0xc195, 0xece3, 0x3fb6, 0x221d, 0xed64, 0xa9ee, 0x3f70, 0xe704, 0x6be3, 0x93bb, 0x3f1a, 0x8b61, 0xd603, 0xa5a0, 0x3eb3, 0xa845, 0xdb07, 0x24e8, 0x3e35, 0x1fc7, 0x3dd5, 0x89d4,
};

__constant const unsigned short Gr[36] = {
    0x3fc7, 0xba0f, 0x8e7d, 0x5db5, 0x3fec, 0x5ff2, 0x3d14, 0xd07e, 0x3fef, 0x98b7, 0x11be, 0x01af, 0x3fd9, 0xadef, 0x1397, 0x84a1, 0x3fb2, 0x2f0d, 0xeadc, 0x33d1, 0x3f78, 0x3115, 0xe347, 0xa140, 0x3f2e, 0x8be8, 0x5d03, 0x8059, 0x3ed1, 0x2495, 0x9f80, 0x12af, 0x3e5a, 0xab6a, 0x654d, 0x7d86,
};
__constant const unsigned short Gs[36] = {

    0x402d, 0x781b, 0x9628, 0xcc60, 0x4042, 0xc56d, 0x2524, 0x0e31, 0x403f, 0x773d, 0x09cc, 0xffb8, 0x4025, 0xfe6b, 0x5163, 0x03f7, 0x3ffc, 0x9f21, 0xc07a, 0xc9fd, 0x3fc2, 0x2450, 0xe40e, 0xf796, 0x3f76, 0x48f2, 0x3a5a, 0x351a, 0x3f18, 0xa059, 0x7cfb, 0x63a1, 0x3ea2, 0xfdb8, 0x5a24, 0x1e2e,
};

__constant const unsigned short Gt[44] = {
    0xbfa2, 0x351f, 0x5f87, 0xaf5b, 0xbfe4, 0x64db, 0x1ff7, 0x5c76, 0xbffb, 0x564a, 0xc221, 0x7e49, 0xbff8, 0x0916, 0x7f6e, 0x0b07, 0xbfe2, 0x0910, 0xd8b0, 0x6edb, 0xbfba, 0x234b, 0x0d8c, 0x9903, 0xbf83, 0x6c54, 0x7f6c, 0x50df, 0xbf3e, 0x2afa, 0x2424, 0x2ad0, 0xbee7, 0xf87a, 0xbc17, 0xf631, 0xbe81, 0xe81f, 0x501e, 0x6c10, 0xbe03, 0x5f45, 0x5e46, 0x870d,
};
__constant const unsigned short Gu[40] = {

    0x4023, 0xb7a2, 0x060a, 0x9812, 0x4035, 0xa3e3, 0x4724, 0xfc96, 0x4031, 0x5025, 0xdb2c, 0x819a, 0x4018, 0xb702, 0xd5cd, 0x94e2, 0x3ff1, 0x6a71, 0x4927, 0x1eb1, 0x3fb9, 0x78de, 0x4ad7, 0x7bc5, 0x3f73, 0x991a, 0x4b2b, 0xc1d7, 0x3f1e, 0xf98f, 0x0b16, 0xbe1c, 0x3eb7, 0x10bf, 0xfdde, 0x4ef3, 0x3e38, 0xe834, 0x9dc8, 0x647e,
};

int D(double a, double* b, double* c, double* d, double* e) {
  typedef __constant const double* data_t;
  double f, g, h, i, j, k, l, m, n, o;
  int p;

  p = 0;
  if (a > Ga) {
    *b = 0;
    *c = 0;
    *d = 0x1.fffffffffffffp1023;
    *e = 0x1.fffffffffffffp1023;
    return (-1);
  }

  if (a < -2.09) {
    p = 15;
    h = sqrt(-a);
    n = -2.0 * a * h / 3.0;
    h = sqrt(h);
    m = Gc / h;
    f = 1.0 / n;
    g = f * f;
    k = 1.0 + g * A(g, (data_t)Gn, 8) / B(g, (data_t)Go, 9);
    l = f * A(g, (data_t)Gp, 10) / B(g, (data_t)Gq, 10);
    o = n + 0.25 * 3.14;
    i = sin(o);
    j = cos(o);
    *b = m * (i * k - j * l);
    *d = m * (j * k + i * l);
    k = 1.0 + g * A(g, (data_t)Gr, 8) / B(g, (data_t)Gs, 9);
    l = f * A(g, (data_t)Gt, 10) / B(g, (data_t)Gu, 10);
    m = Gc * h;
    *c = -m * (j * k + i * l);
    *e = m * (i * k - j * l);
    return (0);
  }

  if (a >= 2.09) {
    p = 5;
    h = sqrt(a);
    n = 2.0 * a * h / 3.0;
    j = exp(n);
    h = sqrt(h);
    m = 2.0 * h * j;
    f = 1.0 / n;
    i = A(f, (data_t)Gf, 7) / A(f, (data_t)Gg, 7);
    *b = Gc * i / m;
    m = -0.5 * Gc * h / j;
    i = A(f, (data_t)Gh, 7) / A(f, (data_t)Gi, 7);
    *c = i * m;

    if (a > 8.3203353) {
      i = f * A(f, (data_t)Gj, 4) / B(f, (data_t)Gk, 5);
      m = Gc * j;
      *d = m * (1.0 + i) / h;
      i = f * A(f, (data_t)Gl, 4) / B(f, (data_t)Gm, 5);
      *e = m * h * (1.0 + i);
      return (0);
    }
  }

  i = 1.0;
  j = a;
  h = 1.0;
  k = 1.0;
  l = a;
  m = 1.0;
  f = a * a * a;
  while (h > 0x1.0p-52) {
    k *= f;
    m += 1.0;
    k /= m;
    l *= f;
    m += 1.0;
    l /= m;
    k /= m;
    i += k;
    m += 1.0;
    l /= m;
    j += l;
    h = __clc_fabs(k / i);
  }
  k = Gd * i;
  l = Ge * j;
  if ((p & 1) == 0)
    *b = k - l;
  if ((p & 2) == 0)
    *d = Gb * (k + l);

  m = 4.0;
  k = a * a / 2.0;
  l = f / 3.0;
  i = k;
  j = 1.0 + l;
  k /= 3.0;
  h = 1.0;

  while (h > 0x1.0p-52) {
    k *= f;
    l /= m;
    m += 1.0;
    l *= f;
    k /= m;
    i += k;
    m += 1.0;
    l /= m;
    k /= m;
    j += l;
    m += 1.0;
    h = __clc_fabs(l / j);
  }

  k = Gd * i;
  l = Ge * j;
  if ((p & 4) == 0)
    *c = k - l;
  if ((p & 8) == 0)
    *e = Gb * (k + l);
  return (0);
}